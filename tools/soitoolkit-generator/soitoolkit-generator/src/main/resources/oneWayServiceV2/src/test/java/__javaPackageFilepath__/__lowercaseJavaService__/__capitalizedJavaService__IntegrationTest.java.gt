package ${javaPackage}.${lowercaseJavaService};

<% if (inboundTransport=="HTTP" || inboundTransport=="HTTPS") { %>
import static ${javaPackage}.${capitalizedJavaArtifactId}MuleServer.getAddress;
<% } %>
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.charset.Charset;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.jms.BytesMessage;
import javax.jms.JMSException;
import javax.jms.MapMessage;
import javax.jms.Message;
import javax.jms.TextMessage;
import javax.sql.DataSource;

import org.apache.commons.io.FileUtils;
import org.junit.BeforeClass;
import org.junit.Test;
<% if (outboundTransport=="FTP") { %>
import org.mockftpserver.core.server.AbstractFtpServer;
<% } %>
import org.mule.api.MuleException;
import org.mule.api.MuleMessage;
import org.mule.api.transport.PropertyScope;
import org.mule.api.transformer.TransformerException;
import org.mule.api.transformer.TransformerMessagingException;
import org.mule.api.transport.DispatchException;
import org.mule.config.ExceptionHelper;
import org.mule.construct.Flow;
import org.mule.transport.file.FileConnector;
import org.mule.transport.ftp.FtpConnector;
import org.mule.transport.sftp.SftpConnector;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.soitoolkit.commons.logentry.schema.v1.LogEvent;
import org.soitoolkit.commons.logentry.schema.v1.LogLevelType;
import org.soitoolkit.commons.mule.core.PropertyNames;
import org.soitoolkit.commons.mule.file.FileUtil;
import org.soitoolkit.commons.mule.ftp.FtpUtil;
import org.soitoolkit.commons.mule.jaxb.JaxbUtil;
import org.soitoolkit.commons.mule.jdbc.JdbcScriptEngine;
import org.soitoolkit.commons.mule.jdbc.JdbcUtil;
import org.soitoolkit.commons.mule.test.AbstractJmsTestUtil;
import org.soitoolkit.commons.mule.test.ActiveMqJmsTestUtil;
import org.soitoolkit.commons.mule.test.junit4.AbstractTestCase;
<% if (outboundTransport=="SFTP") { %>
import org.soitoolkit.commons.mule.test.sftp.SftpServer;
<% } %>
import org.soitoolkit.commons.mule.sftp.SftpUtil;
import org.soitoolkit.commons.mule.util.RecursiveResourceBundle;
import org.springframework.jdbc.core.simple.SimpleJdbcTemplate;

/**
 * The purpose of this integration test is to verify the 
 * behavior of the ${service}-service.
 */
public class ${capitalizedJavaService}IntegrationTest extends AbstractTestCase {
	
	private static final Logger LOGGER = LoggerFactory.getLogger(${capitalizedJavaService}IntegrationTest.class);
	private static final RecursiveResourceBundle RB = new RecursiveResourceBundle("${configPropertyFile}");

	private static final JaxbUtil JAXB_UTIL = new JaxbUtil(LogEvent.class);
	
	private static final String TESTBASE = "src/test/resources/testfiles/${service}/integrationtests";
	
	private static final String ERROR_LOG_QUEUE = "${jmsLogErrorQueue}";
	private static final String INFO_LOG_QUEUE = "${jmsLogInfoQueue}";
	
	private AbstractJmsTestUtil jmsUtil = null;
	
<% if (inboundTransport=="FILE") { %>
	private static final String IN_ARCHIVE_FOLDER = RB.getString("${uppercaseService}_INBOUND_ARCHIVE_FOLDER");
<% } %>
<% if (inboundTransport=="JMS") { %>
	private static final String IN_QUEUE = RB.getString("${uppercaseService}_IN_QUEUE");
<% } %>
	private static final String OUT_QUEUE = RB.getString("${uppercaseService}_OUT_QUEUE");
	private static final String OUT_DL_QUEUE = RB.getString("${uppercaseService}_OUT_DL_QUEUE");
	private static final String PROC_QUEUE = RB.getString("${uppercaseService}_PROC_QUEUE");
	private static final String PROC_DL_QUEUE = RB.getString("${uppercaseService}_PROC_DL_QUEUE");
	
<% if (inboundTransport=="VM") { %>
	private static final String IN_VM_QUEUE = RB.getString("${uppercaseService}_IN_VM_QUEUE");
<% } else if (inboundTransport=="FILE" || inboundTransport=="FTP") { %>
	private static final String IN_FOLDER = RB.getString("${uppercaseService}_INBOUND_FOLDER");
<% } %>
<% if (outboundTransport=="FILE") { %>
	private static final String OUT_FOLDER = RB.getString("${uppercaseService}_OUTBOUND_FOLDER");
<% } %>

<% if (inboundTransport=="HTTP" || inboundTransport=="HTTPS") { %>
	private static final String SERVICE_ENDPOINT = RB.getString("${uppercaseService}_INBOUND_URL");
<% } %>
<% if (inboundTransport=="JDBC" || outboundTransport=="JDBC") { %>
	private DataSource dataSource = null;
    private SimpleJdbcTemplate jdbcTemplate = null;
<% } %>
<% if (inboundTransport=="FILE") { %>
	@BeforeClass
	public static void setUpOnce() {
		System.setProperty("mule.test.timeoutSecs", "120");
	}
<% } %>
    public ${capitalizedJavaService}IntegrationTest() {
		// Only start up Mule once to make the tests run faster...
        // Set to false if tests interfere with each other when Mule is started only once.
		setDisposeContextPerClass(true);
    }

	protected String getConfigResources() {
        return "soitoolkit-mule-jms-connector-activemq-embedded.xml," + 
<% if (inboundTransport=="VM" || outboundTransport=="VM" || inboundTransport=="JDBC" || outboundTransport=="JDBC") { %>
        "soitoolkit-mule-jms-xa-connector-activemq-embedded.xml," + 
<% } else { %>  
<% } %>  
<% if (inboundTransport=="JDBC" || outboundTransport=="JDBC") { %>
        //"soitoolkit-mule-jdbc-xa-datasource-hsql-embedded.xml," +
<% } %> 
<% if (inboundTransport=="JDBC" && outboundTransport!="VM") { %>
//        "soitoolkit-mule-vm-connector.xml," +
<% } %> 
<% if (inboundTransport=="FTP" || outboundTransport=="FTP") { %>
		"soitoolkit-mule-ftp-connector-embedded.xml," + 
<% } %>
<% if (inboundTransport=="SFTP" || outboundTransport=="SFTP") { %>
		"soitoolkit-mule-sftp-connector-embedded.xml," +
<% } %>
		"${artifactId}-common.xml," +
		"${service}/${service}-inbound-service.xml," +
		"${service}/${service}-process-service.xml," +
<% if (outboundTransport!="JMS") { %>		
		"${service}/${service}-outbound-service.xml," +
<% } %>		
		"teststub-services/${service}-teststub-service.xml";
    }

    @Override
	protected void doSetUp() throws Exception {
		super.doSetUp();

		doSetUpJms();
		
<% if (inboundTransport=="JDBC" || outboundTransport=="JDBC") { %>
		doSetUpDb();
<% } %>

<% if (inboundTransport=="FILE") { %>
		FileUtil.initFolder(new File(IN_FOLDER));
<% } %> 
<% if (outboundTransport=="FILE") { %>
		FileUtil.initFolder(new File(OUT_FOLDER));
<% } %> 
<% if (inboundTransport=="FTP") { %>
		// Clear ftp-directories used for inbound endpoint
		// TODO: Also reset the archive
        FtpUtil.initEndpointDirectory(muleContext, "${service}-inbound-endpoint");		
<% } %> 
<% if (outboundTransport=="FTP") { %>
		// Clear ftp-directories used for outbound endpoint
		// TODO: Also reset the archive
        FtpUtil.initEndpointDirectory(muleContext, "${service}-outbound-endpoint");		
<% } %> 

<% if (inboundEndpointFilebased || outboundEndpointFilebased) { %>
//		FileUtil.initFolder(new File(ARCHIVE));
<% } %> 

<% if (inboundTransport=="SFTP") { %>
		// Clear sftp-directories used for inbound endpoint
		// TODO: Also reset the archive
        SftpUtil.initEndpointDirectories(
	    	muleContext,
	    	new String[] {"${service}-service"},
			new String[] {"${service}-inbound-endpoint"});		
<% } %> 
		
<% if (outboundTransport=="SFTP") { %>
		// Clear sftp-directories used for outbound endpoint
		// TODO: Also reset the archive
        SftpUtil.initEndpointDirectories(
	    	muleContext,
	    	new String[] {"${service}-resend-from-archive-service", "${service}-teststub-service"},
			new String[] {"${service}-outbound-endpoint"});		
<% } %> 
    }

	private void doSetUpJms() {
		// TODO: Fix lazy init of JMS connection et al so that we can create jmsutil in the declaration
		// (The embedded ActiveMQ queue manager is not yet started by Mule when jmsutil is delcared...)
		if (jmsUtil == null) jmsUtil = new ActiveMqJmsTestUtil();
		
		jmsUtil.clearQueues(PROC_QUEUE, PROC_DL_QUEUE);
		jmsUtil.clearQueues(OUT_QUEUE, OUT_DL_QUEUE);

		// Clear log queues
		jmsUtil.clearQueues(ERROR_LOG_QUEUE, INFO_LOG_QUEUE);
    }
    
<% if (inboundTransport=="JDBC" || outboundTransport=="JDBC") { %>
	private void doSetUpDb() throws FileNotFoundException {
		dataSource = JdbcUtil.lookupDataSource(muleContext, "soitoolkit-jdbc-xa-datasource");
		jdbcTemplate = new SimpleJdbcTemplate(dataSource);
		JdbcScriptEngine se = new JdbcScriptEngine(dataSource);
		
		try {
			se.execute("src/environment/setup/${artifactId}-db-drop-tables.sql");
		} catch (Throwable ex) {
			LOGGER.warn("Drop db script failed, maybe no db exists? " + ex.getMessage());
		}
		se.execute("src/environment/setup/${artifactId}-db-create-tables.sql");
		se.execute("src/environment/setup/${artifactId}-db-insert-testdata.sql");
    }
<% } %>

    private LogEvent xmlToLogEvent(String xml) {
    	return (LogEvent)JAXB_UTIL.unmarshal(xml);
    }

	/**
	 * The purpose of this integration test is to verify the happy day scenario.
	 * 
	 * @throws IOException if fails read files.
	 * @throws JMSException if JMS error occurs.
	 * @throws InterruptedException if thread is interrupted.
	 */
    @Test
    public void test${capitalizedJavaService}Ok() throws MuleException, IOException, JMSException, InterruptedException {

		<% if (inboundTransport=="FILE") { %>
		final int timeout        	= 90000;
		<% } else { %>
		final int timeout        	= 10000;
		<% } %>
		Map<String, String> headers = new HashMap<String, String>();
        String receivingService   	= "${service}-teststub-service";

<% if (inboundTransport!="JDBC") { %>		
		byte[] inputPayload         = FileUtils.readFileToByteArray(new File(TESTBASE + "/input-ok.txt"));
<% } %>	
<% if (inboundTransport=="FILE") { %>
		// Setup inbound endpoint for file-transport.
        String inboundEndpoint = "file://" + IN_FOLDER + "?connector=soitoolkit-file-connector";
		String filename        = "testfile.txt";
		headers.put(FileConnector.PROPERTY_FILENAME, filename);
<% } else if (inboundTransport=="FTP") { %>
		// Setup inbound endpoint for ftp-transport.
        String inboundEndpoint = "ftp://" + IN_FOLDER + "?connector=soitoolkit-ftp-connector";
		String filename        = "testfile.txt";
		headers.put(FtpConnector.PROPERTY_FILENAME, filename);
<% } else if (inboundTransport=="SFTP") { %>
		// Setup inbound endpoint for sftp-transport.
        String inFolder        = RB.getString("${uppercaseService}_INBOUND_SFTP_FOLDER");
        String inboundEndpoint = "sftp://" + inFolder + "?connector=soitoolkit-sftp-connector&duplicateHandling='addSeqNo'";
		String filename        = "testfile.txt";
		headers.put(SftpConnector.PROPERTY_OUTPUT_PATTERN, filename);
<% } else if (inboundTransport=="JMS") { %>
		// Setup inbound endpoint for jms-transport.
		String inboundEndpoint = "jms://" + IN_QUEUE + "?connector=soitoolkit-jms-connector";
<% } else if (inboundTransport=="VM") { %>
		// Setup inbound endpoint for vm-transport.
		String inboundEndpoint = "vm://" + IN_VM_QUEUE + "?connector=soitoolkit-vm-connector";
<% } else if (inboundTransport=="HTTP") { %>
		// Setup inbound endpoint for http-transport.
		String inboundEndpoint = SERVICE_ENDPOINT + "?connector=soitoolkit-http-connector";
<% } else if (inboundTransport=="HTTPS") { %>
		// Setup inbound endpoint for https-transport.
		String inboundEndpoint = SERVICE_ENDPOINT + "?connector=soitoolkit-https-connector";
<% } else if (inboundTransport=="JDBC") { %>
		// Setup inbound endpoint for database-transport.
        Flow testStubFlow = (Flow) muleContext.getRegistry().lookupObject("${service}-inbound-service");
        testStubFlow.stop();

        jdbcTemplate.update("INSERT INTO ${uppercaseService}_EXPORT_TB (ID, VALUE) VALUES (?,?)", "Annn", "Some value");

        testStubFlow.start();
<% } %>
<% if (inboundTransport=="JDBC") { %>
        // Invoke the service and wait for the transformed message to arrive at the receiving teststub service.
        MuleMessage actualReply = this.waitForServiceComponent(receivingService, timeout);
<% } else { %>
		// Invoke the service and wait for the transformed message to arrive at the receiving teststub service.
		MuleMessage actualReply = dispatchAndWaitForServiceComponent(inboundEndpoint, inputPayload, headers, receivingService, timeout);
<% } %>
<% if (outboundTransport=="JDBC") { %>
		assertTrue(actualReply.getPayload() instanceof List);
		List<Map> actualList = ( List<Map>) actualReply.getPayload();
		assertEquals(1, actualList.size());
		
		assertTrue(actualList.get(0) instanceof Map);
		
		Map actualMap = actualList.get(0);
		String actualId = (String)actualMap.get("ID");
		String actualValue = (String)actualMap.get("VALUE");
		
		assertEquals("1nnn", actualId);
		assertEquals("Some value", actualValue);
<% } else { %>
		byte[] expectedPayload 		= FileUtils.readFileToByteArray(new File(TESTBASE + "/expected-result-ok.txt"));
		
		assertTrue(actualReply.getPayload() instanceof byte[]);

		byte[] actualPayload = (byte[]) actualReply.getPayload();
		
		// Verify the result, i.e. the transformed message.
        assertArrayEquals(expectedPayload, actualPayload);
<% } %>

<% if ((inboundTransport=="FILE" || inboundTransport=="FTP" || inboundTransport=="SFTP") && outboundEndpointFilebased) { %>
	<% if (outboundTransport=="FILE") { %>
		String actualOrignalFilename = actualReply.getProperty("originalFilename", PropertyScope.INBOUND);
        assertEquals(filename, actualOrignalFilename);
	<% } else if (outboundTransport=="FTP") { %>
		String actualOrignalFilename = actualReply.getProperty("originalFilename", PropertyScope.INBOUND);
        assertEquals(filename, actualOrignalFilename);
	<% } else if (outboundTransport=="SFTP") { %>
		<% if (muleVersion.getPomSuffix().startsWith("3.4")) { %>
		String actualOrignalFilename = actualReply.getProperty("originalFilename", PropertyScope.OUTBOUND);
		<% } else { %>
		String actualOrignalFilename = actualReply.getProperty("originalFilename", PropertyScope.INBOUND);
		<% } %>
        assertEquals(filename, actualOrignalFilename);
	<% } %>
<% } %>
        Thread.sleep(1000);

		/*
         * Verify Processing and Outbound Queues
         */
		assertEquals(0, jmsUtil.browseMessagesOnQueue(PROC_QUEUE).size());
		assertEquals(0, jmsUtil.browseMessagesOnQueue(OUT_QUEUE).size());

		/*
		 * Verify DLQs
		 */
		assertEquals(0, jmsUtil.browseMessagesOnQueue(PROC_DL_QUEUE).size());
		assertEquals(0, jmsUtil.browseMessagesOnQueue(OUT_DL_QUEUE).size());

		/*
         * Verify Logs Queues
         */
        List<Message> actualInfoLogs = jmsUtil.browseMessagesOnQueue(INFO_LOG_QUEUE);
		<% if (outboundTransport=="JMS") { %>
        assertEquals(4, actualInfoLogs.size());
        <% } else { %>
        assertEquals(6, actualInfoLogs.size());
        <% } %>
        LogEvent infoLogEvent1 = xmlToLogEvent(((TextMessage) actualInfoLogs.get(0)).getText());
        assertEquals(LogLevelType.INFO, infoLogEvent1.getLogEntry().getMessageInfo().getLevel());
        String actualBusinessCorrelationId = infoLogEvent1.getLogEntry().getRuntimeInfo().getBusinessCorrelationId();
        assertNotNull(actualBusinessCorrelationId);
        assertEquals("msg-in", infoLogEvent1.getLogEntry().getMessageInfo().getMessage());

        LogEvent infoLogEvent2 = xmlToLogEvent(((TextMessage) actualInfoLogs.get(1)).getText());
        assertEquals(LogLevelType.INFO, infoLogEvent2.getLogEntry().getMessageInfo().getLevel());
        assertEquals(actualBusinessCorrelationId, infoLogEvent2.getLogEntry().getRuntimeInfo().getBusinessCorrelationId());
        assertEquals("msg-out", infoLogEvent2.getLogEntry().getMessageInfo().getMessage());
        
        LogEvent infoLogEvent3 = xmlToLogEvent(((TextMessage) actualInfoLogs.get(2)).getText());
        assertEquals(LogLevelType.INFO, infoLogEvent3.getLogEntry().getMessageInfo().getLevel());
        assertEquals(actualBusinessCorrelationId, infoLogEvent3.getLogEntry().getRuntimeInfo().getBusinessCorrelationId());
        assertEquals("msg-in", infoLogEvent3.getLogEntry().getMessageInfo().getMessage());
        
        LogEvent infoLogEvent4 = xmlToLogEvent(((TextMessage) actualInfoLogs.get(3)).getText());
        assertEquals(LogLevelType.INFO, infoLogEvent4.getLogEntry().getMessageInfo().getLevel());
        assertEquals(actualBusinessCorrelationId, infoLogEvent4.getLogEntry().getRuntimeInfo().getBusinessCorrelationId());
        assertEquals("msg-out", infoLogEvent4.getLogEntry().getMessageInfo().getMessage());
        <% if (outboundTransport!="JMS") { %>
		LogEvent infoLogEvent5 = xmlToLogEvent(((TextMessage) actualInfoLogs.get(4)).getText());
        assertEquals(LogLevelType.INFO, infoLogEvent5.getLogEntry().getMessageInfo().getLevel());
        assertEquals(actualBusinessCorrelationId, infoLogEvent5.getLogEntry().getRuntimeInfo().getBusinessCorrelationId());
        assertEquals("msg-in", infoLogEvent5.getLogEntry().getMessageInfo().getMessage());
        
        LogEvent infoLogEvent6 = xmlToLogEvent(((TextMessage) actualInfoLogs.get(5)).getText());
        assertEquals(LogLevelType.INFO, infoLogEvent6.getLogEntry().getMessageInfo().getLevel());
        assertEquals(actualBusinessCorrelationId, infoLogEvent6.getLogEntry().getRuntimeInfo().getBusinessCorrelationId());
        assertEquals("msg-out", infoLogEvent6.getLogEntry().getMessageInfo().getMessage());
        <% } %>
        List<Message> actualErrorLogs = jmsUtil.browseMessagesOnQueue(ERROR_LOG_QUEUE);
        assertEquals(0, actualErrorLogs.size());
    }


	/**
	 * The purpose of this integration test is to verify transformation errors.
	 * 
     * This test verifies error handling with regards to:
     * - transaction-handling 
     * - DLQ-handling
     * - retry-policy 
     * - logging info information to info-queue
     * - logging error information to error-queue
     * 
     * Relies on a redelivery policy defined for ActiveMQ like:
     * (e.g. defined in the amq-embedded-connector used when running jUnit tests)
     * 
     * <spring:bean class="org.apache.activemq.RedeliveryPolicy">
     *	 <spring:property name="maximumRedeliveries" value="0" />
     * </spring:bean>
     * 
     * 
     * DLQ tests expects the following setup in activemq.xml (in the <policyEntry> - element):
     * 
     * <deadLetterStrategy>
     * 		<!--
     *      Use the prefix 'DLQ.' for the destination name, and make
     *      the DLQ a queue rather than a topic
     *      -->
     *      <individualDeadLetterStrategy queuePrefix="DLQ." useQueueForQueueMessages="true" />
     * </deadLetterStrategy>	
     * 
     * @throws IOException if fails read files.
	 * @throws JMSException if JMS error occurs.
	 * @throws InterruptedException if thread is interrupted.
	 */
    @Test
    public void test${capitalizedJavaService}TransformationError() throws MuleException, IOException, JMSException, InterruptedException {
		
<% if (inboundTransport=="FILE") { %>
		final int timeout        	= 90000;
<% } else { %>
		final int timeout        	= 10000;
<% } %>
		Map<String, String> headers = new HashMap<String, String>();
<% if (inboundTransport!="JDBC") { %>	
		byte[] inputPayload         = FileUtils.readFileToByteArray(new File(TESTBASE + "/input-error.txt"));
		byte[] expectedDlqPayload 	= inputPayload;
<% } %>
<% if (inboundTransport=="FILE") { %>
		// Setup inbound endpoint for file-transport.
        String inboundEndpoint = "file://" + IN_FOLDER + "?connector=soitoolkit-file-connector";
		String filename        = "testfile.txt";
		headers.put(FileConnector.PROPERTY_FILENAME, filename);
<% } else if (inboundTransport=="FTP") { %>
		// Setup inbound endpoint for ftp-transport.
        String inboundEndpoint = "ftp://" + IN_FOLDER + "?connector=soitoolkit-ftp-connector";
		String filename        = "testfile.txt";
		headers.put(FtpConnector.PROPERTY_FILENAME, filename);
<% } else if (inboundTransport=="SFTP") { %>
		// Setup inbound endpoint for sftp-transport.
        String inFolder        = RB.getString("${uppercaseService}_INBOUND_SFTP_FOLDER");
        String inboundEndpoint = "sftp://" + inFolder + "?connector=soitoolkit-sftp-connector&duplicateHandling='addSeqNo'";
		String filename        = "testfile.txt";
		headers.put(SftpConnector.PROPERTY_FILENAME, filename);
<% } else if (inboundTransport=="JMS") { %>
		// Setup inbound endpoint for jms-transport.
		String inboundEndpoint = "jms://" + IN_QUEUE + "?connector=soitoolkit-jms-connector";
<% } else if (inboundTransport=="VM") { %>
		// Setup inbound endpoint for vm-transport.
		String inboundEndpoint = "vm://" + IN_VM_QUEUE + "?connector=soitoolkit-vm-connector";
<% } else if (inboundTransport=="HTTP") { %>
		// Setup inbound endpoint for http-transport.
		String inboundEndpoint = SERVICE_ENDPOINT + "?connector=soitoolkit-http-connector";
<% } else if (inboundTransport=="HTTPS") { %>
		// Setup inbound endpoint for https-transport.
		String inboundEndpoint = SERVICE_ENDPOINT + "?connector=soitoolkit-https-connector";
<% } else if (inboundTransport=="JDBC") { %>
		// Setup inbound endpoint for database-transport.
        Flow testStubFlow = (Flow) muleContext.getRegistry().lookupObject("${service}-inbound-service");
        testStubFlow.stop();

        jdbcTemplate.update("INSERT INTO ${uppercaseService}_EXPORT_TB (ID, VALUE) VALUES (?,?)", "Cnnn", "Some value");

        testStubFlow.start();
<% } %>
<% if (inboundTransport=="JDBC") { %>
        Exception exception = this.waitForException(timeout);
<% } else { %>
		// Verify TransformerException
        Exception exception = this.dispatchAndWaitForException(inboundEndpoint, inputPayload, headers, timeout);
<% } %>
        assertTrue(exception instanceof TransformerMessagingException);
        assertTrue(exception.getCause() instanceof TransformerException);

		Thread.sleep(1000);

		/*
		 * Verify DLQs
		 */
		List<Message> dlqMessages = jmsUtil.browseMessagesOnQueue(PROC_DL_QUEUE);
		assertEquals(1, dlqMessages.size());
		Message actualDlqMsg = dlqMessages.get(0);
		
<% if (inboundTransport=="JDBC") { %>
		assertTrue(actualDlqMsg instanceof MapMessage);
		assertEquals("Cnnn", ((MapMessage) actualDlqMsg).getString("ID"));
		assertEquals("Some value", ((MapMessage) actualDlqMsg).getString("VALUE"));
<% } else { %>
		assertTrue(actualDlqMsg instanceof BytesMessage);
		
		byte[] actualDlqBody = new byte[(int)((BytesMessage)actualDlqMsg).getBodyLength()];
		((BytesMessage)actualDlqMsg).readBytes(actualDlqBody);
		assertArrayEquals(expectedDlqPayload, actualDlqBody);
<% } %>
		assertEquals(0, jmsUtil.browseMessagesOnQueue(OUT_DL_QUEUE).size());
		
		/*
		 * Verify Logs
		 */
		List<Message> actualInfoLogs = jmsUtil.browseMessagesOnQueue(INFO_LOG_QUEUE);
		assertEquals(3, actualInfoLogs.size());
		
        LogEvent infoLogEvent1 = xmlToLogEvent(((TextMessage) actualInfoLogs.get(0)).getText());
        assertEquals(LogLevelType.INFO, infoLogEvent1.getLogEntry().getMessageInfo().getLevel());
        String actualBusinessCorrelationId = infoLogEvent1.getLogEntry().getRuntimeInfo().getBusinessCorrelationId();
        assertNotNull(actualBusinessCorrelationId);
        assertEquals("msg-in", infoLogEvent1.getLogEntry().getMessageInfo().getMessage());

        LogEvent infoLogEvent2 = xmlToLogEvent(((TextMessage) actualInfoLogs.get(1)).getText());
        assertEquals(LogLevelType.INFO, infoLogEvent2.getLogEntry().getMessageInfo().getLevel());
        assertEquals(actualBusinessCorrelationId, infoLogEvent2.getLogEntry().getRuntimeInfo().getBusinessCorrelationId());
        assertEquals("msg-out", infoLogEvent2.getLogEntry().getMessageInfo().getMessage());
        
		LogEvent infoLogEvent3 = xmlToLogEvent(((TextMessage) actualInfoLogs.get(2)).getText());
        assertEquals(LogLevelType.INFO, infoLogEvent3.getLogEntry().getMessageInfo().getLevel());
        assertEquals(actualBusinessCorrelationId, infoLogEvent3.getLogEntry().getRuntimeInfo().getBusinessCorrelationId());
        assertEquals("msg-in", infoLogEvent3.getLogEntry().getMessageInfo().getMessage());
        
        List<Message> actualErrorLogs = jmsUtil.browseMessagesOnQueue(ERROR_LOG_QUEUE);
		assertEquals(1, actualErrorLogs.size());
        
        LogEvent errorLogEvent1 = xmlToLogEvent(((TextMessage) actualErrorLogs.get(0)).getText());
        assertEquals(LogLevelType.ERROR, errorLogEvent1.getLogEntry().getMessageInfo().getLevel());
        assertEquals(actualBusinessCorrelationId, errorLogEvent1.getLogEntry().getRuntimeInfo().getBusinessCorrelationId());
     }
}
