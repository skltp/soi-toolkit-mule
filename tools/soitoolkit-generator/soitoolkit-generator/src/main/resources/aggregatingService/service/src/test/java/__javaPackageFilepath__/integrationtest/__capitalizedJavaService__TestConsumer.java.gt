package ${javaPackage}.integrationtest;

import static se.skltp.agp.test.producer.TestProducerDb.TEST_RR_ID_ONE_HIT;

import javax.xml.ws.Holder;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import ${ext.schemaGroupId}.${ext.schemaLowercaseArtifactId}.v1.rivtabp21.${ext.schemaArtifactId}ResponderInterface;
import ${ext.schemaGroupId}.${ext.schemaLowercaseArtifactId}responder.v1.${ext.schemaArtifactId}ResponseType;
import ${ext.schemaGroupId}.${ext.schemaLowercaseArtifactId}responder.v1.${ext.schemaArtifactId}Type;
import ${javaPackage}.${capitalizedJavaService}MuleServer;
import se.skltp.agp.test.consumer.AbstractTestConsumer;
import se.skltp.agp.test.consumer.SoapHeaderCxfInterceptor;
import se.skltp.agp.riv.interoperability.headers.v1.ProcessingStatusType;

public class ${capitalizedJavaService}TestConsumer extends AbstractTestConsumer<${ext.schemaArtifactId}ResponderInterface> {

	private static final Logger log = LoggerFactory.getLogger(${capitalizedJavaService}TestConsumer.class);

	public static void main(String[] args) {
		String serviceAddress = ${capitalizedJavaService}MuleServer.getAddress("SERVICE_INBOUND_URL");
		String personnummer = TEST_RR_ID_ONE_HIT;

		${capitalizedJavaService}TestConsumer consumer = new ${capitalizedJavaService}TestConsumer(serviceAddress, SAMPLE_SENDER_ID, SAMPLE_ORIGINAL_CONSUMER_HSAID);
		Holder<${ext.schemaArtifactId}ResponseType> responseHolder = new Holder<${ext.schemaArtifactId}ResponseType>();
		Holder<ProcessingStatusType> processingStatusHolder = new Holder<ProcessingStatusType>();

		consumer.callService("logical-adress", personnummer, processingStatusHolder, responseHolder);

<% if (!ext.genSchema) { %>
        // TODO: CHANGE GENERATED SAMPLE CODE - START
        if (1==1) throw new UnsupportedOperationException("Not yet implemented");
        /*
<% } %>
		log.info("Returned #timeslots = " + responseHolder.value.getRequestActivity().size());
<% if (!ext.genSchema) { %>
		*/
        // TODO: CHANGE GENERATED SAMPLE CODE - END
<% } %>
	}

	public ${capitalizedJavaService}TestConsumer(String serviceAddress, String senderId, String originalConsumerHsaId) {
	    
		// Setup a web service proxy for communication using HTTPS with Mutual Authentication
		super(${ext.schemaArtifactId}ResponderInterface.class, serviceAddress, senderId, originalConsumerHsaId);
	}

	public void callService(String logicalAddress, String registeredResidentId, Holder<ProcessingStatusType> processingStatusHolder, Holder<${ext.schemaArtifactId}ResponseType> responseHolder) {

		log.debug("Calling ${ext.schemaArtifactId}-soap-service with Registered Resident Id = {}", registeredResidentId);
		
		${ext.schemaArtifactId}Type request = new ${ext.schemaArtifactId}Type();

<% if (!ext.genSchema) { %>
        // TODO: CHANGE GENERATED SAMPLE CODE - START
        if (1==1) throw new UnsupportedOperationException("Not yet implemented");
        /*
<% } %>
		request.setSubjectOfCareId(registeredResidentId);
<% if (!ext.genSchema) { %>
        */
        // TODO: CHANGE GENERATED SAMPLE CODE - END
<% } %>
		${ext.schemaArtifactId}ResponseType response = _service.${ext.schemaInitialLowercaseArtifactId}(logicalAddress, request);
		responseHolder.value = response;
		
		processingStatusHolder.value = SoapHeaderCxfInterceptor.getLastFoundProcessingStatus();
	}
}