#summary Guidelines for developers of the soi-toolkit
#labels Phase-Implementation

Content

<wiki:toc max_depth="2" />

= Introduction =

Guidelines for developers of the soi-toolkit...

soi-toolkit is based on the following components:
|| *Name* || *Svn-path* || *Description* ||
|| superpom || commons/poms/superpom/trunk || TBS ||
|| commons-schemas || commons/components/commons-schemas/trunk || TBS ||
|| commons-log || commons/components/commons-log/trunk || TBS ||
|| commons-mule || commons/components/commons-mule/trunk || TBS ||

= Initial setup =

The soi-toolkit uses Sonatype OSS Maven Repository to release artifacts to the Maven central repository, see https://docs.sonatype.org/display/repository/sonatype+oss+maven+repository+usage+guide for details.

Added to the setup of the development environment required for a user of soi-toolkit a developer must perform the following setup steps to be able to perform releases of soi-toolkit:

 # Create an JIRA account at https://issues.sonatype.org/
 # Add the following servers to the maven settings.xml - file:
{{{
  <servers>
    <server>
      <id>sonatype-nexus-snapshots</id>
      <username>your-jira-id</username>
      <password>your-jira-pwd</password>
    </server>
    <server>
      <id>sonatype-nexus-staging</id>
      <username>your-jira-id</username>
      <password>your-jira-pwd</password>
    </server>
  </servers>
}}}
 # Install pgp, create key-pair and distribute public key.
 See http://www.sonatype.com/people/2010/01/how-to-generate-pgp-signatures-with-maven/ for details. 
= Release handling =

Each component mentioned above has its own release cycle and are released as described below.

To release maven based components of soi-toolkit we use mavens release-plugin.

Perform the following steps

 # Check that the code is in synch
  * Check for updates:
{{{
svn update
}}}
  * Commit changes
{{{
svn commit
}}}
 # Check versions of dependencies and parent pom, replace any SNAPSHOT-versions with stable ones. 
 # Perform a dryrun to verify that everything is ok, i.e. a release build will be successful and not fail in the middle leaving the release build in an inconsistent state. *Note:* Version numbers shall follow the format defined below.
{{{
mvn release:clean release:prepare -DdryRun=true
}}}
 # Fix any problems identified by the dryrun then perform a prepare-step to create the tag in svn:
{{{
mvn release:clean release:prepare
}}}
 # *TO BE DECIDED*: How will we perform the deploy to the maven repo?

= Naming Conventions =

Version numbers of components:
 * {{{n.n.n}}} for released components
 * {{{REL-n.n.n}}} for svn tags for released components
 * {{{n.n.n-SNAPSHOT}}} for unreleased components during development